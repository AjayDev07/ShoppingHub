@model ShoppingMVC.Models.ViewModels.ItemsIndexViewModel
@using System.Security.Claims
@using ShoppingMVC.Constants

@{
    ViewData["Title"] = "Home Page";
    bool isAdmin = ViewData["Admin"] as bool? ?? false;
}

@{
    // Pagination logic
    var currentPage = Context.Request.Query["page"].FirstOrDefault();
    if (string.IsNullOrEmpty(currentPage))
    {
        currentPage = "1"; // Default to first page if no page query parameter is provided
    }
    var itemsPerPage = 5;
    var startIndex = (Convert.ToInt32(currentPage) - 1) * itemsPerPage;
    var pagedItems = Model.Items.Skip(startIndex).Take(itemsPerPage);
    var serialNumber = startIndex + 1;

    // Pagination navigation
    var totalItems = Model.Items != null ? Model.Items.Count() : 0; // Check if Model.Items is not null and then get the count
    var totalPages = (int)Math.Ceiling((double)totalItems / itemsPerPage);
}


<link rel="stylesheet" href="path/to/styles.css" />

<div class="text-center">
    <h1 class="display-4">Welcome to the Shopping Hub</h1>
    <p>Start your shopping according to your choice.</p>
</div>


<style>
    .category-links {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        background-color: #f5f5f5;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .category-link {
        text-decoration: none;
        color: #333;
        font-weight: bold;
        padding: 10px 20px;
        margin: 10px;
        border-radius: 5px;
        transition: background-color 0.3s ease, color 0.3s ease;
        background-color: #fff; 
        border: 2px solid #8B4513; 
    }

        .category-link:hover {
            background-color: #8B4513;
            color: #fff; 
        }
</style>



@*-----------------------------------------------------------------------*@


@* Showing the item description With the Help of Enum*@

@* <div class="category-links">
    @foreach (var category in Enum.GetValues(typeof(Discription.ItemDiscription)))
    {
        var categoryName = Enum.GetName(typeof(Discription.ItemDiscription), category);
        var categoryRouteValue = category.ToString();

        <a asp-controller="Home" asp-action="Index" asp-route-category="@categoryRouteValue" class="category-link">@categoryName</a>
    }
</div> *@

@*-----------------------------------------------------------------------*@



@* Showing the item description With the Help of Master tabel from the Db*@

<div class="category-links">
    @foreach (var itemDescription in Model.Categories)
    {
        <div>
            <a asp-controller="Home" asp-action="Index" asp-route-category="@itemDescription" class="category-link">@itemDescription</a>
        </div>
    }
</div>

<br />
<br />

<div>
    <h4>Details:</h4>
    <br />

    @if (isAdmin)
    {
        <div class="btn-group" role="group">
            <form asp-action="AddItemIndex">
                <button type="submit" class="btn btn-info">Add Item</button>
            </form>
            <form asp-action="AddItemDescription">
                <button type="submit" class="btn btn-info" style="margin-left: 10px;"> Add Description</button>
            </form>
        </div>
    }

    <br />

    <!-- Pagination -->
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @for (var i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(i == Convert.ToInt32(currentPage) ? "active" : "")">
                    <a class="page-link" href="?page=@i">@i</a>
                </li>
            }
        </ul>
    </nav>

    <table class="table">
        <thead>
            <tr>
                <th>Sr. No.</th>
                <th>Item Name</th>
                <th>Description</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in pagedItems)
            {
                <tr>
                    <td>@serialNumber</td>
                    <td>@item.ItemName</td>
                    <td>@item.ItemDiscription</td>
                    <td>
                        <input type="number" min="1" max="@item.ItemQuantity" value="1" name="quantity_@item.ItemId" />
                    </td>
                    <td>@item.ItemPrice</td>
                    <td class="button-container">
                        <style>
                            .button-container {
                                display: flex;
                                justify-content: space-around;
                                align-items: center;
                            }
                        </style>
                        <button class="btn btn-primary btn-sm" onclick="addToWishlist('@item.ItemName', @item.ItemPrice, '@item.ItemId')">Add to Wishlist</button>
                        <button class="btn btn-primary btn-sm" onclick="addToCart('@item.ItemName', @item.ItemPrice, '@item.ItemId')">Add to Cart</button>
                        @if (isAdmin)
                        {
                            <form asp-action="RemoveItem" method="post">
                                <input type="hidden" name="itemId" value="@item.ItemId">
                                <button type="submit" class="btn btn-danger btn-sm">Remove Item</button>
                            </form>
                        }
                        @if (isAdmin)
                        {
                            <form>
                                <button type="button" class="btn btn-success btn-sm" onclick="prepareEditModal('@item.ItemId', '@item.ItemName', '@item.ItemDiscription', '@item.ItemQuantity', '@item.ItemPrice')">Edit</button>
                            </form>
                        }
                    </td>
                </tr>
                serialNumber++;
            }
        </tbody>
    </table>
</div>




<!-- Modal for editing items -->
<div class="modal fade" id="editItemModal" tabindex="-1" role="dialog" aria-labelledby="editItemModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editItemModalLabel">Edit Item</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editItemForm" method="post">
                    <input type="hidden" name="itemId" id="editItemId">
                    <div class="form-group">
                        <label for="editItemName">Item Name:</label>
                        <input type="text" class="form-control" id="editItemName" name="itemName" />
                    </div>
                    <div class="form-group">
                        <label for="editItemDiscription">Description:</label>
                        <input type="text" class="form-control" id="editItemDiscription" name="itemDiscription" readonly/>
                    </div>
                    <div class="form-group">
                        <label for="editItemQuantity">Quantity:</label>
                        <input type="number" class="form-control" id="editItemQuantity" name="itemQuantity" />
                    </div>
                    <div class="form-group">
                        <label for="editItemPrice">Price:</label>
                        <input type="number" class="form-control" id="editItemPrice" name="itemPrice" />
                    </div>
                    <br />
                    <button type="submit" class="btn btn-primary" asp-action="EditItem" asp-controller="Home" method="post">Save changes</button>
                </form>
            </div>
        </div>
    </div>
</div>


<script src="jquery-3.7.1.min.js"></script>

<script>
    function prepareEditModal(itemId, itemName, itemDiscription, itemQuantity, itemPrice) {
        $("#editItemId").val(itemId);
        $("#editItemName").val(itemName);
        $("#editItemDiscription").val(itemDiscription);  
        $("#editItemQuantity").val(itemQuantity);
        $("#editItemPrice").val(itemPrice);
        $("#editItemModal").modal("show");
    }

    $("#editItemForm").submit(function (e) {
        e.preventDefault();

        var itemId = $("#editItemId").val();
        var itemName = $("#editItemName").val();
        var itemDiscription = $("#editItemDiscription").val();  
        var itemQuantity = $("#editItemQuantity").val();
        var itemPrice = $("#editItemPrice").val();

        $.ajax({
            type: "POST",
            url: "/Home/EditItem",
            data: {
                ItemId: itemId,
                ItemName: itemName,
                ItemDiscription: itemDiscription,  
                ItemQuantity: itemQuantity,
                ItemPrice: itemPrice
            },
            success: function (data) {
                if (data.success) {
                    alert("Item edited successfully!");
                    location.reload();
                } else {
                    alert("Failed to edit item.");
                }
            },
            error: function () {
                alert("Error in the AJAX request.");
            }
        });

        $("#editItemModal").modal("hide");
    });
</script>


<script>
    function addToCart(itemName, itemPrice, itemId) {
        var isAuthenticated = @User.Identity.IsAuthenticated.ToString().ToLower();

        if (!isAuthenticated) {

            var quantityInput = document.querySelector('input[name="quantity_' + itemId + '"]');
            var quantity = parseInt(quantityInput.value);
            var total = quantity * itemPrice;

            alert('Adding to cart: ' + itemName + ' - Quantity: ' + quantity + ' - Total: ' + total);

            var cartItem = {
                ItemId: itemId,
                ItemName: itemName,
                ItemPrice: itemPrice,
                ItemQuantity: quantity,
                UserId: '@User.FindFirstValue(ClaimTypes.NameIdentifier)'  // Get the user ID from the server
            };

            $.ajax({
                type: 'POST',
                url: '/Cart/AddToCart',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(cartItem),
                success: function (data) {
                    if (data.success) {
                        alert('Added to cart successfully!');
                    } else {
                        alert('Please login first, Failed to add to cart.');
                    }
                }
            });
        }
    }
</script>

<script>
    function addToWishlist(itemName, itemPrice, itemId) {
        var isAuthenticated = @User.Identity.IsAuthenticated.ToString().ToLower();

        if (!isAuthenticated) {

            var quantityInput = document.querySelector('input[name="quantity_' + itemId + '"]');
            var quantity = parseInt(quantityInput.value);
            var total = quantity * itemPrice;

            alert('Adding to Wishlist: ' + itemName + ' - Quantity: ' + quantity + ' - Total: ' + total);

            var cartItem = {
                ItemId: itemId,
                ItemName: itemName,
                ItemPrice: itemPrice,
                ItemQuantity: quantity,
                UserId: '@User.FindFirstValue(ClaimTypes.NameIdentifier)'  // Get the user ID from the server
            };

            $.ajax({
                type: 'POST',
                url: '/WishList/AddToWishlist',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(cartItem),
                success: function (data) {
                    if (data.success) {
                        alert('Added to Wishlist successfully!');
                    } else {
                        alert('Please login first, Failed to wishlist to cart.');
                    }
                }
            });
        }
    }
</script>